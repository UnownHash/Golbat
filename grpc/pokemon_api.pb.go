// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: grpc/pokemon_api.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PokemonScanResponse_Status int32

const (
	PokemonScanResponse_UNSET   PokemonScanResponse_Status = 0
	PokemonScanResponse_SUCCESS PokemonScanResponse_Status = 200
)

// Enum value maps for PokemonScanResponse_Status.
var (
	PokemonScanResponse_Status_name = map[int32]string{
		0:   "UNSET",
		200: "SUCCESS",
	}
	PokemonScanResponse_Status_value = map[string]int32{
		"UNSET":   0,
		"SUCCESS": 200,
	}
)

func (x PokemonScanResponse_Status) Enum() *PokemonScanResponse_Status {
	p := new(PokemonScanResponse_Status)
	*p = x
	return p
}

func (x PokemonScanResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PokemonScanResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_pokemon_api_proto_enumTypes[0].Descriptor()
}

func (PokemonScanResponse_Status) Type() protoreflect.EnumType {
	return &file_grpc_pokemon_api_proto_enumTypes[0]
}

func (x PokemonScanResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PokemonScanResponse_Status.Descriptor instead.
func (PokemonScanResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_grpc_pokemon_api_proto_rawDescGZIP(), []int{4, 0}
}

type PokemonScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLat  float32       `protobuf:"fixed32,1,opt,name=min_lat,json=minLat,proto3" json:"min_lat,omitempty"`
	MinLon  float32       `protobuf:"fixed32,2,opt,name=min_lon,json=minLon,proto3" json:"min_lon,omitempty"`
	MaxLat  float32       `protobuf:"fixed32,3,opt,name=max_lat,json=maxLat,proto3" json:"max_lat,omitempty"`
	MaxLon  float32       `protobuf:"fixed32,4,opt,name=max_lon,json=maxLon,proto3" json:"max_lon,omitempty"`
	Limit   int32         `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Filters []*PokemonDnf `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *PokemonScanRequest) Reset() {
	*x = PokemonScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_pokemon_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PokemonScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PokemonScanRequest) ProtoMessage() {}

func (x *PokemonScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_pokemon_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PokemonScanRequest.ProtoReflect.Descriptor instead.
func (*PokemonScanRequest) Descriptor() ([]byte, []int) {
	return file_grpc_pokemon_api_proto_rawDescGZIP(), []int{0}
}

func (x *PokemonScanRequest) GetMinLat() float32 {
	if x != nil {
		return x.MinLat
	}
	return 0
}

func (x *PokemonScanRequest) GetMinLon() float32 {
	if x != nil {
		return x.MinLon
	}
	return 0
}

func (x *PokemonScanRequest) GetMaxLat() float32 {
	if x != nil {
		return x.MaxLat
	}
	return 0
}

func (x *PokemonScanRequest) GetMaxLon() float32 {
	if x != nil {
		return x.MaxLon
	}
	return 0
}

func (x *PokemonScanRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PokemonScanRequest) GetFilters() []*PokemonDnf {
	if x != nil {
		return x.Filters
	}
	return nil
}

type PokemonDnf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pokemon          []*PokemonId `protobuf:"bytes,1,rep,name=pokemon,proto3" json:"pokemon,omitempty"`
	Iv               *RangeMinMax `protobuf:"bytes,2,opt,name=Iv,proto3,oneof" json:"Iv,omitempty"`
	AtkIv            *RangeMinMax `protobuf:"bytes,3,opt,name=AtkIv,proto3,oneof" json:"AtkIv,omitempty"`
	DefIv            *RangeMinMax `protobuf:"bytes,4,opt,name=DefIv,proto3,oneof" json:"DefIv,omitempty"`
	StaIv            *RangeMinMax `protobuf:"bytes,5,opt,name=StaIv,proto3,oneof" json:"StaIv,omitempty"`
	Level            *RangeMinMax `protobuf:"bytes,6,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
	Cp               *RangeMinMax `protobuf:"bytes,7,opt,name=Cp,proto3,oneof" json:"Cp,omitempty"`
	Gender           *RangeMinMax `protobuf:"bytes,8,opt,name=Gender,proto3,oneof" json:"Gender,omitempty"`
	Size             *RangeMinMax `protobuf:"bytes,9,opt,name=Size,proto3,oneof" json:"Size,omitempty"`
	PvpLittleRanking *RangeMinMax `protobuf:"bytes,10,opt,name=PvpLittleRanking,proto3,oneof" json:"PvpLittleRanking,omitempty"`
	PvpGreatRanking  *RangeMinMax `protobuf:"bytes,11,opt,name=PvpGreatRanking,proto3,oneof" json:"PvpGreatRanking,omitempty"`
	PvpUltraRanking  *RangeMinMax `protobuf:"bytes,12,opt,name=PvpUltraRanking,proto3,oneof" json:"PvpUltraRanking,omitempty"`
}

func (x *PokemonDnf) Reset() {
	*x = PokemonDnf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_pokemon_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PokemonDnf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PokemonDnf) ProtoMessage() {}

func (x *PokemonDnf) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_pokemon_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PokemonDnf.ProtoReflect.Descriptor instead.
func (*PokemonDnf) Descriptor() ([]byte, []int) {
	return file_grpc_pokemon_api_proto_rawDescGZIP(), []int{1}
}

func (x *PokemonDnf) GetPokemon() []*PokemonId {
	if x != nil {
		return x.Pokemon
	}
	return nil
}

func (x *PokemonDnf) GetIv() *RangeMinMax {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *PokemonDnf) GetAtkIv() *RangeMinMax {
	if x != nil {
		return x.AtkIv
	}
	return nil
}

func (x *PokemonDnf) GetDefIv() *RangeMinMax {
	if x != nil {
		return x.DefIv
	}
	return nil
}

func (x *PokemonDnf) GetStaIv() *RangeMinMax {
	if x != nil {
		return x.StaIv
	}
	return nil
}

func (x *PokemonDnf) GetLevel() *RangeMinMax {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *PokemonDnf) GetCp() *RangeMinMax {
	if x != nil {
		return x.Cp
	}
	return nil
}

func (x *PokemonDnf) GetGender() *RangeMinMax {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *PokemonDnf) GetSize() *RangeMinMax {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *PokemonDnf) GetPvpLittleRanking() *RangeMinMax {
	if x != nil {
		return x.PvpLittleRanking
	}
	return nil
}

func (x *PokemonDnf) GetPvpGreatRanking() *RangeMinMax {
	if x != nil {
		return x.PvpGreatRanking
	}
	return nil
}

func (x *PokemonDnf) GetPvpUltraRanking() *RangeMinMax {
	if x != nil {
		return x.PvpUltraRanking
	}
	return nil
}

type PokemonId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Form *int32 `protobuf:"varint,2,opt,name=form,proto3,oneof" json:"form,omitempty"`
}

func (x *PokemonId) Reset() {
	*x = PokemonId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_pokemon_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PokemonId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PokemonId) ProtoMessage() {}

func (x *PokemonId) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_pokemon_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PokemonId.ProtoReflect.Descriptor instead.
func (*PokemonId) Descriptor() ([]byte, []int) {
	return file_grpc_pokemon_api_proto_rawDescGZIP(), []int{2}
}

func (x *PokemonId) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PokemonId) GetForm() int32 {
	if x != nil && x.Form != nil {
		return *x.Form
	}
	return 0
}

type RangeMinMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *int32 `protobuf:"varint,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max *int32 `protobuf:"varint,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
}

func (x *RangeMinMax) Reset() {
	*x = RangeMinMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_pokemon_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeMinMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeMinMax) ProtoMessage() {}

func (x *RangeMinMax) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_pokemon_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeMinMax.ProtoReflect.Descriptor instead.
func (*RangeMinMax) Descriptor() ([]byte, []int) {
	return file_grpc_pokemon_api_proto_rawDescGZIP(), []int{3}
}

func (x *RangeMinMax) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *RangeMinMax) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type PokemonScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  PokemonScanResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=pokemon_api.PokemonScanResponse_Status" json:"status,omitempty"`
	Pokemon []*PokemonDetails          `protobuf:"bytes,2,rep,name=pokemon,proto3" json:"pokemon,omitempty"`
}

func (x *PokemonScanResponse) Reset() {
	*x = PokemonScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_pokemon_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PokemonScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PokemonScanResponse) ProtoMessage() {}

func (x *PokemonScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_pokemon_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PokemonScanResponse.ProtoReflect.Descriptor instead.
func (*PokemonScanResponse) Descriptor() ([]byte, []int) {
	return file_grpc_pokemon_api_proto_rawDescGZIP(), []int{4}
}

func (x *PokemonScanResponse) GetStatus() PokemonScanResponse_Status {
	if x != nil {
		return x.Status
	}
	return PokemonScanResponse_UNSET
}

func (x *PokemonScanResponse) GetPokemon() []*PokemonDetails {
	if x != nil {
		return x.Pokemon
	}
	return nil
}

type PokemonDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PokestopId              *string  `protobuf:"bytes,2,opt,name=pokestop_id,json=pokestopId,proto3,oneof" json:"pokestop_id,omitempty"`
	SpawnId                 *int64   `protobuf:"varint,3,opt,name=spawn_id,json=spawnId,proto3,oneof" json:"spawn_id,omitempty"`
	Lat                     float64  `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                     float64  `protobuf:"fixed64,5,opt,name=lon,proto3" json:"lon,omitempty"`
	Weight                  *float32 `protobuf:"fixed32,6,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Size                    *int32   `protobuf:"varint,7,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Height                  *float32 `protobuf:"fixed32,8,opt,name=height,proto3,oneof" json:"height,omitempty"`
	ExpireTimestamp         *int32   `protobuf:"varint,9,opt,name=expire_timestamp,json=expireTimestamp,proto3,oneof" json:"expire_timestamp,omitempty"`
	Updated                 *int32   `protobuf:"varint,10,opt,name=updated,proto3,oneof" json:"updated,omitempty"`
	PokemonId               *int32   `protobuf:"varint,11,opt,name=pokemon_id,json=pokemonId,proto3,oneof" json:"pokemon_id,omitempty"`
	Move_1                  *int32   `protobuf:"varint,12,opt,name=move_1,json=move1,proto3,oneof" json:"move_1,omitempty"`
	Move_2                  *int32   `protobuf:"varint,13,opt,name=move_2,json=move2,proto3,oneof" json:"move_2,omitempty"`
	Gender                  *int32   `protobuf:"varint,14,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	Cp                      *int32   `protobuf:"varint,15,opt,name=cp,proto3,oneof" json:"cp,omitempty"`
	AtkIv                   *int32   `protobuf:"varint,16,opt,name=atk_iv,json=atkIv,proto3,oneof" json:"atk_iv,omitempty"`
	DefIv                   *int32   `protobuf:"varint,17,opt,name=def_iv,json=defIv,proto3,oneof" json:"def_iv,omitempty"`
	StaIv                   *int32   `protobuf:"varint,18,opt,name=sta_iv,json=staIv,proto3,oneof" json:"sta_iv,omitempty"`
	Iv                      *float32 `protobuf:"fixed32,19,opt,name=iv,proto3,oneof" json:"iv,omitempty"`
	Form                    *int32   `protobuf:"varint,20,opt,name=form,proto3,oneof" json:"form,omitempty"`
	Level                   *int32   `protobuf:"varint,21,opt,name=level,proto3,oneof" json:"level,omitempty"`
	EncounterWeather        *int32   `protobuf:"varint,22,opt,name=encounter_weather,json=encounterWeather,proto3,oneof" json:"encounter_weather,omitempty"`
	Weather                 *int32   `protobuf:"varint,23,opt,name=weather,proto3,oneof" json:"weather,omitempty"`
	Costume                 *int32   `protobuf:"varint,24,opt,name=costume,proto3,oneof" json:"costume,omitempty"`
	FirstSeenTimestamp      *int64   `protobuf:"varint,25,opt,name=first_seen_timestamp,json=firstSeenTimestamp,proto3,oneof" json:"first_seen_timestamp,omitempty"`
	Changed                 *int32   `protobuf:"varint,26,opt,name=changed,proto3,oneof" json:"changed,omitempty"`
	CellId                  *int64   `protobuf:"varint,27,opt,name=cell_id,json=cellId,proto3,oneof" json:"cell_id,omitempty"`
	ExpireTimestampVerified bool     `protobuf:"varint,28,opt,name=expire_timestamp_verified,json=expireTimestampVerified,proto3" json:"expire_timestamp_verified,omitempty"`
	DisplayPokemonId        *int32   `protobuf:"varint,29,opt,name=display_pokemon_id,json=displayPokemonId,proto3,oneof" json:"display_pokemon_id,omitempty"`
	IsDitto                 *bool    `protobuf:"varint,30,opt,name=is_ditto,json=isDitto,proto3,oneof" json:"is_ditto,omitempty"`
	SeenType                *string  `protobuf:"bytes,31,opt,name=seen_type,json=seenType,proto3,oneof" json:"seen_type,omitempty"`
	Shiny                   *bool    `protobuf:"varint,32,opt,name=shiny,proto3,oneof" json:"shiny,omitempty"`
	Username                *string  `protobuf:"bytes,33,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Capture_1               *float32 `protobuf:"fixed32,34,opt,name=capture_1,json=capture1,proto3,oneof" json:"capture_1,omitempty"`
	Capture_2               *float32 `protobuf:"fixed32,35,opt,name=capture_2,json=capture2,proto3,oneof" json:"capture_2,omitempty"`
	Capture_3               *float32 `protobuf:"fixed32,36,opt,name=capture_3,json=capture3,proto3,oneof" json:"capture_3,omitempty"`
	Pvp                     *string  `protobuf:"bytes,37,opt,name=pvp,proto3,oneof" json:"pvp,omitempty"`
	Distance                *float32 `protobuf:"fixed32,38,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
}

func (x *PokemonDetails) Reset() {
	*x = PokemonDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_pokemon_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PokemonDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PokemonDetails) ProtoMessage() {}

func (x *PokemonDetails) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_pokemon_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PokemonDetails.ProtoReflect.Descriptor instead.
func (*PokemonDetails) Descriptor() ([]byte, []int) {
	return file_grpc_pokemon_api_proto_rawDescGZIP(), []int{5}
}

func (x *PokemonDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PokemonDetails) GetPokestopId() string {
	if x != nil && x.PokestopId != nil {
		return *x.PokestopId
	}
	return ""
}

func (x *PokemonDetails) GetSpawnId() int64 {
	if x != nil && x.SpawnId != nil {
		return *x.SpawnId
	}
	return 0
}

func (x *PokemonDetails) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *PokemonDetails) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *PokemonDetails) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *PokemonDetails) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *PokemonDetails) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *PokemonDetails) GetExpireTimestamp() int32 {
	if x != nil && x.ExpireTimestamp != nil {
		return *x.ExpireTimestamp
	}
	return 0
}

func (x *PokemonDetails) GetUpdated() int32 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *PokemonDetails) GetPokemonId() int32 {
	if x != nil && x.PokemonId != nil {
		return *x.PokemonId
	}
	return 0
}

func (x *PokemonDetails) GetMove_1() int32 {
	if x != nil && x.Move_1 != nil {
		return *x.Move_1
	}
	return 0
}

func (x *PokemonDetails) GetMove_2() int32 {
	if x != nil && x.Move_2 != nil {
		return *x.Move_2
	}
	return 0
}

func (x *PokemonDetails) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *PokemonDetails) GetCp() int32 {
	if x != nil && x.Cp != nil {
		return *x.Cp
	}
	return 0
}

func (x *PokemonDetails) GetAtkIv() int32 {
	if x != nil && x.AtkIv != nil {
		return *x.AtkIv
	}
	return 0
}

func (x *PokemonDetails) GetDefIv() int32 {
	if x != nil && x.DefIv != nil {
		return *x.DefIv
	}
	return 0
}

func (x *PokemonDetails) GetStaIv() int32 {
	if x != nil && x.StaIv != nil {
		return *x.StaIv
	}
	return 0
}

func (x *PokemonDetails) GetIv() float32 {
	if x != nil && x.Iv != nil {
		return *x.Iv
	}
	return 0
}

func (x *PokemonDetails) GetForm() int32 {
	if x != nil && x.Form != nil {
		return *x.Form
	}
	return 0
}

func (x *PokemonDetails) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PokemonDetails) GetEncounterWeather() int32 {
	if x != nil && x.EncounterWeather != nil {
		return *x.EncounterWeather
	}
	return 0
}

func (x *PokemonDetails) GetWeather() int32 {
	if x != nil && x.Weather != nil {
		return *x.Weather
	}
	return 0
}

func (x *PokemonDetails) GetCostume() int32 {
	if x != nil && x.Costume != nil {
		return *x.Costume
	}
	return 0
}

func (x *PokemonDetails) GetFirstSeenTimestamp() int64 {
	if x != nil && x.FirstSeenTimestamp != nil {
		return *x.FirstSeenTimestamp
	}
	return 0
}

func (x *PokemonDetails) GetChanged() int32 {
	if x != nil && x.Changed != nil {
		return *x.Changed
	}
	return 0
}

func (x *PokemonDetails) GetCellId() int64 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *PokemonDetails) GetExpireTimestampVerified() bool {
	if x != nil {
		return x.ExpireTimestampVerified
	}
	return false
}

func (x *PokemonDetails) GetDisplayPokemonId() int32 {
	if x != nil && x.DisplayPokemonId != nil {
		return *x.DisplayPokemonId
	}
	return 0
}

func (x *PokemonDetails) GetIsDitto() bool {
	if x != nil && x.IsDitto != nil {
		return *x.IsDitto
	}
	return false
}

func (x *PokemonDetails) GetSeenType() string {
	if x != nil && x.SeenType != nil {
		return *x.SeenType
	}
	return ""
}

func (x *PokemonDetails) GetShiny() bool {
	if x != nil && x.Shiny != nil {
		return *x.Shiny
	}
	return false
}

func (x *PokemonDetails) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *PokemonDetails) GetCapture_1() float32 {
	if x != nil && x.Capture_1 != nil {
		return *x.Capture_1
	}
	return 0
}

func (x *PokemonDetails) GetCapture_2() float32 {
	if x != nil && x.Capture_2 != nil {
		return *x.Capture_2
	}
	return 0
}

func (x *PokemonDetails) GetCapture_3() float32 {
	if x != nil && x.Capture_3 != nil {
		return *x.Capture_3
	}
	return 0
}

func (x *PokemonDetails) GetPvp() string {
	if x != nil && x.Pvp != nil {
		return *x.Pvp
	}
	return ""
}

func (x *PokemonDetails) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

var File_grpc_pokemon_api_proto protoreflect.FileDescriptor

var file_grpc_pokemon_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x4c, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x44, 0x6e, 0x66,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xbe, 0x06, 0x0a, 0x0a, 0x50, 0x6f,
	0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x44, 0x6e, 0x66, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x6f, 0x6b, 0x65,
	0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x07, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x02, 0x49, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x76, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x41, 0x74, 0x6b,
	0x49, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d,
	0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x4d,
	0x61, 0x78, 0x48, 0x01, 0x52, 0x05, 0x41, 0x74, 0x6b, 0x49, 0x76, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x05, 0x44, 0x65, 0x66, 0x49, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x48, 0x02, 0x52, 0x05, 0x44, 0x65, 0x66, 0x49, 0x76,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x49, 0x76, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x48, 0x03, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x49, 0x76, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61,
	0x78, 0x48, 0x04, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x02, 0x43, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e,
	0x4d, 0x61, 0x78, 0x48, 0x05, 0x52, 0x02, 0x43, 0x70, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x48, 0x06, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x48, 0x07, 0x52, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x50, 0x76, 0x70, 0x4c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x48, 0x08, 0x52, 0x10, 0x50, 0x76,
	0x70, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x0f, 0x50, 0x76, 0x70, 0x47, 0x72, 0x65, 0x61, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x48, 0x09, 0x52, 0x0f, 0x50, 0x76, 0x70, 0x47, 0x72, 0x65, 0x61, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0f, 0x50, 0x76,
	0x70, 0x55, 0x6c, 0x74, 0x72, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x48, 0x0a, 0x52,
	0x0f, 0x50, 0x76, 0x70, 0x55, 0x6c, 0x74, 0x72, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x76, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41,
	0x74, 0x6b, 0x49, 0x76, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x44, 0x65, 0x66, 0x49, 0x76, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x49, 0x76, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x43, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x50, 0x76, 0x70, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x50, 0x76, 0x70, 0x47, 0x72, 0x65, 0x61, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x50, 0x76, 0x70, 0x55, 0x6c,
	0x74, 0x72, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x09, 0x50, 0x6f,
	0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x4b, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d,
	0x61, 0x78, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x70,
	0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x6d,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x70, 0x6f, 0x6b, 0x65, 0x6d,
	0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0xc8, 0x01, 0x22, 0xfc, 0x0c, 0x0a, 0x0e, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x6b, 0x65,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6f, 0x6b, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x07, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x05, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x70, 0x6f, 0x6b, 0x65,
	0x6d, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x32, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0a, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x63, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x02, 0x63, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x74, 0x6b, 0x5f, 0x69, 0x76, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0c, 0x52, 0x05, 0x61, 0x74, 0x6b, 0x49, 0x76, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d,
	0x52, 0x05, 0x64, 0x65, 0x66, 0x49, 0x76, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x5f, 0x69, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x49, 0x76, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x0f, 0x52, 0x02, 0x69, 0x76, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x04, 0x66, 0x6f, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x10, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x13, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x14, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x15, 0x52,
	0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x17, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x6d,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x74, 0x74, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x07, 0x69, 0x73, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x08, 0x73, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x6e, 0x79, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x05, 0x73, 0x68, 0x69, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x31, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x1d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x32, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x02, 0x48, 0x1e, 0x52, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x33, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x48, 0x1f, 0x52, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x33, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x76, 0x70, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x03, 0x70, 0x76, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x21, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x32,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x63, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x74, 0x6b, 0x5f, 0x69, 0x76, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x76, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x5f, 0x69, 0x76, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x76, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x74, 0x74, 0x6f,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x68, 0x69, 0x6e, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x33, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x70, 0x76, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x32, 0x58, 0x0a, 0x07, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x22,
	0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6e, 0x6f,
	0x77, 0x6e, 0x68, 0x61, 0x73, 0x68, 0x2f, 0x67, 0x6f, 0x6c, 0x62, 0x61, 0x74, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_pokemon_api_proto_rawDescOnce sync.Once
	file_grpc_pokemon_api_proto_rawDescData = file_grpc_pokemon_api_proto_rawDesc
)

func file_grpc_pokemon_api_proto_rawDescGZIP() []byte {
	file_grpc_pokemon_api_proto_rawDescOnce.Do(func() {
		file_grpc_pokemon_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_pokemon_api_proto_rawDescData)
	})
	return file_grpc_pokemon_api_proto_rawDescData
}

var file_grpc_pokemon_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpc_pokemon_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_grpc_pokemon_api_proto_goTypes = []interface{}{
	(PokemonScanResponse_Status)(0), // 0: pokemon_api.PokemonScanResponse.Status
	(*PokemonScanRequest)(nil),      // 1: pokemon_api.PokemonScanRequest
	(*PokemonDnf)(nil),              // 2: pokemon_api.PokemonDnf
	(*PokemonId)(nil),               // 3: pokemon_api.PokemonId
	(*RangeMinMax)(nil),             // 4: pokemon_api.RangeMinMax
	(*PokemonScanResponse)(nil),     // 5: pokemon_api.PokemonScanResponse
	(*PokemonDetails)(nil),          // 6: pokemon_api.PokemonDetails
}
var file_grpc_pokemon_api_proto_depIdxs = []int32{
	2,  // 0: pokemon_api.PokemonScanRequest.filters:type_name -> pokemon_api.PokemonDnf
	3,  // 1: pokemon_api.PokemonDnf.pokemon:type_name -> pokemon_api.PokemonId
	4,  // 2: pokemon_api.PokemonDnf.Iv:type_name -> pokemon_api.RangeMinMax
	4,  // 3: pokemon_api.PokemonDnf.AtkIv:type_name -> pokemon_api.RangeMinMax
	4,  // 4: pokemon_api.PokemonDnf.DefIv:type_name -> pokemon_api.RangeMinMax
	4,  // 5: pokemon_api.PokemonDnf.StaIv:type_name -> pokemon_api.RangeMinMax
	4,  // 6: pokemon_api.PokemonDnf.Level:type_name -> pokemon_api.RangeMinMax
	4,  // 7: pokemon_api.PokemonDnf.Cp:type_name -> pokemon_api.RangeMinMax
	4,  // 8: pokemon_api.PokemonDnf.Gender:type_name -> pokemon_api.RangeMinMax
	4,  // 9: pokemon_api.PokemonDnf.Size:type_name -> pokemon_api.RangeMinMax
	4,  // 10: pokemon_api.PokemonDnf.PvpLittleRanking:type_name -> pokemon_api.RangeMinMax
	4,  // 11: pokemon_api.PokemonDnf.PvpGreatRanking:type_name -> pokemon_api.RangeMinMax
	4,  // 12: pokemon_api.PokemonDnf.PvpUltraRanking:type_name -> pokemon_api.RangeMinMax
	0,  // 13: pokemon_api.PokemonScanResponse.status:type_name -> pokemon_api.PokemonScanResponse.Status
	6,  // 14: pokemon_api.PokemonScanResponse.pokemon:type_name -> pokemon_api.PokemonDetails
	1,  // 15: pokemon_api.Pokemon.Search:input_type -> pokemon_api.PokemonScanRequest
	5,  // 16: pokemon_api.Pokemon.Search:output_type -> pokemon_api.PokemonScanResponse
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_grpc_pokemon_api_proto_init() }
func file_grpc_pokemon_api_proto_init() {
	if File_grpc_pokemon_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_pokemon_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PokemonScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_pokemon_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PokemonDnf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_pokemon_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PokemonId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_pokemon_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeMinMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_pokemon_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PokemonScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_pokemon_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PokemonDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_pokemon_api_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_grpc_pokemon_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_grpc_pokemon_api_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_grpc_pokemon_api_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_pokemon_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_pokemon_api_proto_goTypes,
		DependencyIndexes: file_grpc_pokemon_api_proto_depIdxs,
		EnumInfos:         file_grpc_pokemon_api_proto_enumTypes,
		MessageInfos:      file_grpc_pokemon_api_proto_msgTypes,
	}.Build()
	File_grpc_pokemon_api_proto = out.File
	file_grpc_pokemon_api_proto_rawDesc = nil
	file_grpc_pokemon_api_proto_goTypes = nil
	file_grpc_pokemon_api_proto_depIdxs = nil
}
